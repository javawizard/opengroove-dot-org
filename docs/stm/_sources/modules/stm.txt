

==================================================================
:mod:`stm` --- A pure-Python software transactional memory system.
==================================================================

.. module:: stm
   :synopsis: A pure-Python software transactional memory system.

This module provides a software transactional memory system for Python. It
provides full support for isolated transactions, blocking, timed blocking, and
transactional invariants.

Have a look at the documentation for the atomically() function and the TVar
class. Those form the core building blocks of the STM system.

----------
Class TVar
----------

A transactional variable.

TVars are the main primitives used within the STM system. They hold a
reference to a single value. They can only be read or written from within a
call to atomically().

More complex datatypes (such as TList, TDict, and TObject) are available in
stm.datatypes.

.. class:: TVar(self, value=None)

   Create a TVar with the specified initial value.

   .. method:: get(self)

      Return the current value of this TVar.

      This can only be called from within a call to atomically(). An
      exception will be thrown if this method is called elsewhere.

   .. method:: set(self, value)

      Set the value of this TVar to the specified value.

      This can only be called from within a call to atomically(). An
      exception will be thrown if this method is called elsewhere.

   .. attribute:: value

      A property wrapper around self.get and self.set.

--------------
Class TWeakRef
--------------

A transactional weak reference with a simple guarantee: the state of a
given weak reference (i.e. whether or not it's been garbage collected yet)
remains the same over the course of a given transaction. More specifically,
if a TWeakRef's referent is garbage collected in the middle of a
transaction that previously read the reference as alive, the transaction
will be immediately restarted.

A callback function may be specified when creating a TWeakRef; this
function will be called in its own transaction when the value referred to
by the TWeakRef is garbage collected, if the TWeakRef itself is still
alive. Note that the callback function will only be called if the
transaction in which this TWeakRef is created commits successfully.

TWeakRefs are fully compatible with the retry() function; that is, a
function such as the following works as expected, and blocks until the
TWeakRef's referent has been garbage collected::

    def block_until_garbage_collected(some_weak_ref):
        if some_weak_ref.get() is not None:
            retry()

TWeakRefs are not mutable. If mutable weak references are desired, see
stm.datatypes.TMutableWeakRef.

.. class:: TWeakRef(self, value, callback=None)

   Create a new weak reference pointing to the specified value.

   .. method:: __call__(self)

      An alias for self.get() provided for API compatibility with Python's
      weakref.ref class.

   .. method:: get(self)

      Return the value that this weak reference refers to, or None if its
      value has been garbage collected.

      This will always return the same value over the course of a given
      transaction.

   .. attribute:: is_alive



   .. attribute:: value

      A property wrapper around self.get.

      Note that this is a read-only property.

---------
Functions
---------



.. function:: atomically(function)

   Run the specified function in an STM transaction.

   Changes made to TVars from within a transaction will not be visible to
   other transactions until the transaction commits, and changes from other
   transactions started after this one started will not be seen by this one.
   The net effect is one of wrapping every transaction with a global lock, but
   without the loss of parallelism that would result.

   If the specified function throws an exception, the exception will be
   propagated out, and all of the changes made to TVars during the course of
   the transaction will be reverted.

   atomically() fully supports nested transactions. If a nested transaction
   throws an exception, the changes it made are reverted, and the exception
   propagated out of the call to atomically().

   The return value of atomically() is the return value of the function that
   was passed to it.

.. function:: elapsed(seconds=None, time=None)

   Provides support for timeouts.

   This function returns True if the specified amount of time has passed, or
   False if it hasn't. This provides a transactionally safe way to implement
   things like timeouts.

   Either seconds or time may be specified. Seconds indicates a number of
   seconds from when this transaction was first attempted after which this
   function will return True. Time indicates an absolute time (given in terms
   of time.time()) at which this function will return True.

   This could be used to, for example, pop an item from the end of a list,
   waiting up to n seconds for an item to become available before raising
   Timeout::

       if some_list:
           return some_list.pop()
       elif elapsed(n):
           raise Timeout
       else:
           retry()

   None is considered to be an infinite timeout, so False will be returned if
   both seconds and time are None. This mirrors the old behavior of retry()
   when it took on elapsed's job, and makes writing code that may or may not
   time out somewhat easier.

.. function:: invariant(function)

   (This function is a wrapper on top of watch(). The same warning present on
   watch() applies here.)

   Provides support for transactional invariants.

   This function is called to propose a new invariant. The passed-in function
   must succeed now, at the end of the current transaction, and at the end of
   every subsequent transaction. If it fails at the end of any transaction,
   that transaction will be immediately aborted, and the exception raised by
   the invariant propagated.

   To succeed, a function must return either None or True. It can indicate
   failure either by returning False or by raising an exception. This allows
   both invariants that signal failure by raising an exception and invariants
   that signal success/failure by returning the value of a simple boolean
   expression.

   This function used to be its own primitive before the introduction of
   watch(). It's now just a simple wrapper on top of that function.

   TODO: Update documentation

.. function:: or_else(*functions)

   Run (and return the value produced by) the first function passed into this
   function that does not retry (see the documentation of the retry()
   function), or retry if all of the passed-in functions retry (or if no
   arguments are passed in). See the documentation for retry() for more
   information.

   This function could be considered the STM equivalent of Unix's select()
   system call. One could, for example, read an item from the first of two
   queues, q1 and q2, to actually produce an item with something like this::

       item = or_else(q1.get, q2.get)

   or_else can also be used to make non-blocking variants of blocking
   functions. For example, given one of our queues above, we can get the first
   value available from the queue or, if it does not currently have any values
   available, return None with::

       item = or_else(q1.get, lambda: None)

   Note that each function passed in is automatically run in its own nested
   transaction so that the effects of those that end up retrying are reverted
   and only the effects of the function that succeeds are persisted. Also note
   that if any of the functions raise an exception, that exception will be
   propagated, and the side effects of the function reverted. (I'm still
   debating that last point, so that could change.)

.. function:: previously(function, toplevel=False)

   (This function is highly experimental. Use at your own risk.)

   Return the value that the specified function would have returned had it
   been run in a transaction just prior to the current one.

   If toplevel is False, the specified function will be run as if it were just
   before the start of the innermost nested transaction, if any. If toplevel
   is True, the specified function will be run as if it were just before the
   start of the outermost transaction.

   This function can be used to propose invariants that reason about changes
   made over the course of a transaction, like the following invariant that
   prevents a particular variable from ever being decremented::

       @invariant
       def _():
           old_value = previously(lambda: some_var.get())
           new_value = some_var.get()
           if new_value < old_value:
               raise Exception("This var cannot be decremented")

.. function:: retry(resume_after=None, resume_at=None)

   Provides support for transactions that block.

   This function, when called, indicates to the STM system that the caller has
   detected state with which it isn't yet ready to continue (for example, a
   queue from which an item is to be read is actually empty). The current
   transaction will be immediately aborted and automatically restarted once
   at least one of the TVars it read has been modified.

   This can be used to make, for example, a blocking queue from a list with a
   function like the following::

       def pop_or_block(some_list):
           if len(some_list) > 0:
               return some_list.pop()
           else:
               retry()

   Functions making use of retry() can be multiplexed, a la Unix's select
   system call, with the or_else function. See its documentation for more
   information.

   Resume_after and resume_at provide a mechanism to effect timeouts that
   became obsolete with the introduction of elapsed(). Their presence causes
   retry to behave thus::

       if elapsed(seconds=resume_after, time=resume_at):
           return
       retry()

   They will be going away in a future version of this library.

.. function:: watch(function, callback=None)

   (This function is highly experimental and should not yet be used.)

   A function that generalizes the previous behavior of invariant() to allow
   side effects in a separate callback function when necessary. More
   documentation to come soon. invariant() will shortly be rewritten as a thin
   wrapper around this function.

   If callback is None, then a function is returned such that
   watch(function)(callback) is equivalent to watch(function, callback). This
   allows watch to be used as a decorator.