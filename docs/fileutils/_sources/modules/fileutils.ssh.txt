

=========================
:mod:`fileutils.ssh` --- 
=========================

.. module:: fileutils.ssh
   :synopsis: 



-------------
Class SSHFile
-------------

A concrete file implementation allowing file operations to be carried
out on a remote host via SSH and SFTP.

Instances of SSHFile can be constructed around an instance of
paramiko.Transport by doing::

    f = SSHFile.from_transport(transport)

They can also be obtained from :obj:`~SSHFile.connect`.

SSHFile instances wrap their underlying paramiko.Transport instances with
an object that automatically closes them on garbage collection. There's
therefore no need to do anything special with an SSHFile when you're done
with it, although you can use it as a context manager to force it to close
before it's garbage collected.

*Method resolution order:* :obj:`~fileutils.mixins.ChildrenMixin`, :obj:`~fileutils.interface.BaseFile`

.. class:: SSHFile(self, connection, path='/')



   .. method:: __enter__(self)



   .. method:: __exit__(self, *args)



   .. method:: __str__(self)
               __repr__(self)



   .. method:: child(self, *names)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.child` *in class* :obj:`~fileutils.interface.BaseFile`

   .. attribute:: child_names



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.child_names` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: create_folder(self, ignore_existing=False, recursive=False)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.create_folder` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: delete(self, ignore_missing=False)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.delete` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: disconnect(self)

      Disconnect this SSHFile's underlying connection.

      You usually won't need to call this explicitly; connections are
      automatically closed when all SSHFiles referring to them are garbage
      collected. You can use this method to force the connection to
      disconnect before all such references are garbage collected, if you
      want.

   .. method:: get_path_components(self, relative_to=None)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.get_path_components` *in class* :obj:`~fileutils.interface.BaseFile`

   .. attribute:: link_target



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.link_target` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: link_to(self, other)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.link_to` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: open_for_reading(self)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.open_for_reading` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: open_for_writing(self, append=False)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.open_for_writing` *in class* :obj:`~fileutils.interface.BaseFile`

   .. attribute:: parent



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.parent` *in class* :obj:`~fileutils.interface.BaseFile`

   .. method:: rename_to(self, other)



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.rename_to` *in class* :obj:`~fileutils.interface.BaseFile`

   .. attribute:: size



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.size` *in class* :obj:`~fileutils.interface.BaseFile`

   .. attribute:: type



      |  *Overrides* :obj:`~fileutils.interface.BaseFile.type` *in class* :obj:`~fileutils.interface.BaseFile`

   *Members inherited from class* :obj:`~fileutils.mixins.ChildrenMixin`\ *:* :obj:`~fileutils.mixins.ChildrenMixin.children`

   *Members inherited from class* :obj:`~fileutils.interface.BaseFile`\ *:* :obj:`~fileutils.interface.BaseFile.__div__`, :obj:`~fileutils.interface.BaseFile.ancestor_of`, :obj:`~fileutils.interface.BaseFile.ancestors`, :obj:`~fileutils.interface.BaseFile.append`, :obj:`~fileutils.interface.BaseFile.as_working`, :obj:`~fileutils.interface.BaseFile.attributes`, :obj:`~fileutils.interface.BaseFile.cd`, :obj:`~fileutils.interface.BaseFile.change_to`, :obj:`~fileutils.interface.BaseFile.check_file`, :obj:`~fileutils.interface.BaseFile.check_folder`, :obj:`~fileutils.interface.BaseFile.copy_attributes_to`, :obj:`~fileutils.interface.BaseFile.copy_into`, :obj:`~fileutils.interface.BaseFile.copy_to`, :obj:`~fileutils.interface.BaseFile.dereference`, :obj:`~fileutils.interface.BaseFile.descendant_of`, :obj:`~fileutils.interface.BaseFile.exists`, :obj:`~fileutils.interface.BaseFile.get_ancestors`, :obj:`~fileutils.interface.BaseFile.get_path`, :obj:`~fileutils.interface.BaseFile.hash`, :obj:`~fileutils.interface.BaseFile.is_broken`, :obj:`~fileutils.interface.BaseFile.is_directory`, :obj:`~fileutils.interface.BaseFile.is_file`, :obj:`~fileutils.interface.BaseFile.is_folder`, :obj:`~fileutils.interface.BaseFile.is_link`, :obj:`~fileutils.interface.BaseFile.is_mountpoint`, :obj:`~fileutils.interface.BaseFile.makedirs`, :obj:`~fileutils.interface.BaseFile.mkdir`, :obj:`~fileutils.interface.BaseFile.mkdirs`, :obj:`~fileutils.interface.BaseFile.mountpoint`, :obj:`~fileutils.interface.BaseFile.name`, :obj:`~fileutils.interface.BaseFile.path`, :obj:`~fileutils.interface.BaseFile.path_components`, :obj:`~fileutils.interface.BaseFile.read`, :obj:`~fileutils.interface.BaseFile.read_blocks`, :obj:`~fileutils.interface.BaseFile.recurse`, :obj:`~fileutils.interface.BaseFile.safe_child`, :obj:`~fileutils.interface.BaseFile.same_as`, :obj:`~fileutils.interface.BaseFile.sibling`, :obj:`~fileutils.interface.BaseFile.valid`, :obj:`~fileutils.interface.BaseFile.write`

-------------------
Class SSHFileSystem
-------------------



*Method resolution order:* :obj:`~fileutils.interface.FileSystem`

.. class:: SSHFileSystem(self, transport, client, client_name=None, autoclose=True)



   .. method:: __del__(self)



   .. method:: child(self, *path_components)



      |  *Overrides* :obj:`~fileutils.interface.FileSystem.child` *in class* :obj:`~fileutils.interface.FileSystem`

   .. method:: close(self)



   .. attribute:: roots



      |  *Overrides* :obj:`~fileutils.interface.FileSystem.roots` *in class* :obj:`~fileutils.interface.FileSystem`

   *Members inherited from class* :obj:`~fileutils.interface.FileSystem`\ *:* :obj:`~fileutils.interface.FileSystem.mountpoints`

---------
Functions
---------



.. function:: ssh_connect(host, username)

